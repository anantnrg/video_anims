{
  "version": 0,
  "timeEvents": [
    {
      "name": "learn basics",
      "targetTime": 2.505875706214689
    },
    {
      "name": "we utilize memory",
      "targetTime": 7.505875706214689
    },
    {
      "name": "memory is divided into two parts",
      "targetTime": 8.595612052730695
    },
    {
      "name": "lets see how they're different",
      "targetTime": 9.787269303201505
    },
    {
      "name": "integers",
      "targetTime": 12.034059292320112
    },
    {
      "name": "floats",
      "targetTime": 12.913330239001287
    },
    {
      "name": "booleans",
      "targetTime": 13.663330239001287
    },
    {
      "name": "last value pushed",
      "targetTime": 14.413330239001287
    },
    {
      "name": "first one to be popped off",
      "targetTime": 14.663330239001287
    },
    {
      "name": "efficient access to data",
      "targetTime": 15.61311261114492
    },
    {
      "name": "but most of the time",
      "targetTime": 18.013112611144926
    },
    {
      "name": "strings",
      "targetTime": 19.213402881940883
    },
    {
      "name": "vectors",
      "targetTime": 20.233577044418457
    },
    {
      "name": "sizes can change",
      "targetTime": 20.983577044418457
    },
    {
      "name": "cannot be stored in the stack",
      "targetTime": 24.34380926105522
    },
    {
      "name": "this is were the heap memory comes into play",
      "targetTime": 25.574118883237574
    },
    {
      "name": "store values of any size",
      "targetTime": 27.554428505419928
    },
    {
      "name": "can grow or shrink",
      "targetTime": 29.53522191226221
    },
    {
      "name": "unlike the stack",
      "targetTime": 31.03522191226221
    },
    {
      "name": "cannot directly access value",
      "targetTime": 34.03522191226221
    },
    {
      "name": "instead, you need to",
      "targetTime": 36.03580245385412
    },
    {
      "name": "create a pointer",
      "targetTime": 36.78580245385412
    },
    {
      "name": "this brings us to our next topic",
      "targetTime": 38.986924664665544
    },
    {
      "name": "allocation and deallocation",
      "targetTime": 44.236924664665544
    },
    {
      "name": "memory leaks",
      "targetTime": 48.736924664665544
    },
    {
      "name": "dangling pointers",
      "targetTime": 49.28692466466554
    },
    {
      "name": "there are two primary approaches",
      "targetTime": 52.364631255106396
    },
    {
      "name": "manual management",
      "targetTime": 55.15109462259022
    },
    {
      "name": "garbage collection",
      "targetTime": 58.80069484382315
    },
    {
      "name": "first lets talk about manual",
      "targetTime": 60.30069484382315
    },
    {
      "name": "for example c provides",
      "targetTime": 61.80069484382315
    },
    {
      "name": "like malloc",
      "targetTime": 63.30069484382315
    },
    {
      "name": "and free",
      "targetTime": 64.05069484382315
    },
    {
      "name": "next lets talk about garbage collection",
      "targetTime": 64.80069484382315
    },
    {
      "name": "langs such as go",
      "targetTime": 66.30069484382315
    },
    {
      "name": "or javascript",
      "targetTime": 67.05069484382315
    },
    {
      "name": "it identifies and recalims",
      "targetTime": 67.80069484382315
    },
    {
      "name": "lets see how rust achieves memory safety",
      "targetTime": 75.25069484382315
    },
    {
      "name": "instead rust uses ownership system",
      "targetTime": 79.00069484382315
    },
    {
      "name": "consists of three concepts",
      "targetTime": 79.75069484382315
    },
    {
      "name": "ownership",
      "targetTime": 80.50069484382315
    },
    {
      "name": "borrowing",
      "targetTime": 81.25069484382315
    },
    {
      "name": "lifetimes",
      "targetTime": 82.00069484382315
    },
    {
      "name": "we will take a look at first two",
      "targetTime": 82.75069484382315
    },
    {
      "name": "first we will learn about the three rules",
      "targetTime": 86.25069484382315
    },
    {
      "name": "each value has one owner",
      "targetTime": 87.00069484382315
    },
    {
      "name": "there can only be one owner",
      "targetTime": 87.75069484382315
    },
    {
      "name": "when owner gone, value gone",
      "targetTime": 88.50069484382315
    },
    {
      "name": "lets look at the first one",
      "targetTime": 89.25069484382315
    },
    {
      "name": "lets assume we have a string",
      "targetTime": 92.61076859296004
    },
    {
      "name": "this string has an owner",
      "targetTime": 95.47025493768784
    },
    {
      "name": "what this will do is",
      "targetTime": 96.22025493768784
    }
  ],
  "seed": 302519928
}